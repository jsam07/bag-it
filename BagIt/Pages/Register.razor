@page "/register"
@using Models
@using System.Net.Http
@using System.Net.Http.Headers
@using System.Net.Http.Json
@using System.Text.Json
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@inject NavigationManager NavManager


<div class="min-h-full flex">
  <div class="flex-1 flex flex-col justify-center py-12 px-4 sm:px-6 lg:flex-none lg:px-20 xl:px-24">
    <div class="mx-auto w-full max-w-sm lg:w-96">
      <div>
        <img class="w-auto" src="/img/logo.png" alt="Workflow">
        <h2 class="mt-6 text-3xl font-extrabold text-gray-900">Register</h2>
      </div>

      <EditForm Model="@user" OnValidSubmit="@PostRegister" class="mt-8">
          <DataAnnotationsValidator />

        @if (error != null)
        {
           <div class="rounded-md bg-red-50 p-4">
          <div class="flex">
            <div class="flex-shrink-0">
              <!-- Heroicon name: solid/x-circle -->
              <svg class="h-5 w-5 text-red-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
              </svg>
            </div>
            <div class="ml-3">
              <h3 class="text-sm font-medium text-red-800">@error.Message</h3>
            </div>
          </div>
        </div>
        }

        <div class="mt-6">
          <div class="space-y-6">

            <div class="space-y-1">
              <label for="email" class="block text-sm font-medium text-gray-700"> Email address </label>
              <div class="mt-1">
                <InputText @bind-Value="@user.Email" id="email"  name="email" type="email" autocomplete="email" class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-teal-500 focus:border-teal-500 sm:text-sm"/>
                <div class="mt-2 text-sm text-red-600">
                    <ValidationMessage  For="@(() => user.Email)" />
                </div>
            </div>
            </div>

            <div class="space-y-1">
              <label for="password" class="block text-sm font-medium text-gray-700"> Password </label>
              <div class="mt-1">
                <InputText @bind-Value="@user.Password" id="password" name="password" type="password" autocomplete="current-password" class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-teal-500 focus:border-teal-500 sm:text-sm" />
                <div class="mt-2 text-sm text-red-600">
                    <ValidationMessage  For="@(() => user.Password)" />
                </div>
              </div>
            </div>

            <div class="space-y-1">
              <label for="username" class="block text-sm font-medium text-gray-700"> Username </label>
              <div class="mt-1">
                <InputText @bind-Value="@user.Username" id="username"  name="username" type="text" class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-teal-500 focus:border-teal-500 sm:text-sm"/>
                <div class="mt-2 text-sm text-red-600">
                    <ValidationMessage  For="@(() => user.Username)" />
                </div>
              </div>
            </div>

            <div class="space-y-1">
              <label for="firstname" class="block text-sm font-medium text-gray-700"> First Name </label>
              <div class="mt-1">
                <InputText @bind-Value="@user.FirstName" id="firstname"  name="firstname" type="text" class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-teal-500 focus:border-teal-500 sm:text-sm"/>
                <div class="mt-2 text-sm text-red-600">
                    <ValidationMessage  For="@(() => user.FirstName)" />
                </div>
              </div>
            </div>

            <div class="space-y-1">
              <label for="lastname" class="block text-sm font-medium text-gray-700"> Last Name </label>
              <div class="mt-1">
                <InputText @bind-Value="@user.LastName" id="lastname"  name="firstname" type="text" class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-teal-500 focus:border-teal-500 sm:text-sm"/>
                <div class="mt-2 text-sm text-red-600">
                    <ValidationMessage  For="@(() => user.LastName)" />
                </div>
              </div>
            </div>

            <div class="space-y-1">
              <label for="phone" class="block text-sm font-medium text-gray-700"> Phone Number </label>
              <div class="mt-1">
                <InputText @bind-Value="@user.Phone" id="phone"  name="phone" type="phone" class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-teal-500 focus:border-teal-500 sm:text-sm"/>
                <div class="mt-2 text-sm text-red-600">
                    <ValidationMessage  For="@(() => user.Phone)" />
                </div>
              </div>
            </div>

            <div class="space-y-1">
              <label for="address" class="block text-sm font-medium text-gray-700"> Address </label>
              <div class="mt-1">
                <InputText @bind-Value="@user.LastName" id="address"  name="address" type="text" class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-teal-500 focus:border-teal-500 sm:text-sm"/>
                <div class="mt-2 text-sm text-red-600">
                    <ValidationMessage  For="@(() => user.Address)" />
                </div>
              </div>
            </div>

            <div class="flex items-center justify-between">
              <div class="flex items-center">
                <input id="remember-me" name="remember-me" type="checkbox" class="h-4 w-4 text-teal-600 focus:ring-teal-500 border-gray-300 rounded">
                <label for="remember-me" class="ml-2 block text-sm text-gray-900"> Remember me </label>
              </div>

              <div class="text-sm">
                <button type="button" @onclick="NavigateToLogin" class="font-medium text-teal-600 hover:text-teal-800"> Login </button>
              </div>
            </div>

            <div>
              <button type="submit" class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-teal-600 hover:bg-teal-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-teal-500">Register</button>
            </div>
          </div>
        </div>
      </EditForm>
    </div>
  </div>
  <div class="hidden lg:block relative w-0 flex-1">
    <img class="absolute inset-0 h-full w-full object-cover" src="https://images.unsplash.com/photo-1505904267569-f02eaeb45a4c?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1908&q=80" alt="">
  </div>
</div>

@code {

    public string Email;
    public JWToken token;
    public string Password;
    public AuthError error;
    public User user = new User();
    static HttpClient client = new HttpClient();
    public string url = "https://localhost:7210/api/user/register";


    public async Task PostRegister()
    {
        try
        {
            error = null;
            HttpResponseMessage response = await client.PostAsJsonAsync(url, user);

            if (response.StatusCode != System.Net.HttpStatusCode.OK)
            {
                var message = await response.Content.ReadAsStringAsync();
                error = new AuthError()
                    {
                        Message = message
                    };

                return;
            } 


            // Nagivate user to other page here
            // User Authenticated && Registerd
            var jsonString = await response.Content.ReadAsStringAsync();
            token = JsonConvert.DeserializeObject<JWToken>(jsonString);
            
        } catch (Exception e)
        {
            Console.WriteLine("Error logging in");
            error = new AuthError()
                    {
                        Message = "Error: unable to register user."
                    };
        }

    }

    public void NavigateToLogin()
    {
        NavManager.NavigateTo("/login");
    }

} 