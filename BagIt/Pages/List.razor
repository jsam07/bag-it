@page "/list/"
@using Microsoft.AspNetCore.SignalR.Client
@using Models
@using System.Net.Http
@using System.Net.Http.Headers
@using System.Net.Http.Json
@using System.Text.Json
@using System.Text.Json.Serialization
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using System.Web
@using System.Globalization
@inject NavigationManager NavManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using Microsoft.Extensions.DependencyInjection



<div class="bg-white">
  <div class="max-w-7xl mx-auto overflow-hidden sm:px-6 lg:px-8">
    <h2 class="sr-only">Products</h2>
    <ul>
            @foreach(Product item in listItems.ToArray())
            {
                <li>@item.Name</li>
                <button type="button" @onclick="() => DeleteItem(item)">Delete</button>
            }
        </ul>

    <div class="-mx-px border-l border-gray-200 grid grid-cols-2 sm:mx-0 md:grid-cols-3 lg:grid-cols-4">
      @foreach (Product product in products)
      {
          <div class="group relative p-4 border-r border-b border-gray-200 sm:p-6">
          <div class="rounded-lg flex flex-col bg-gray-100">
              <button type="button" class="ml-auto m-4" @onclick="() => AddToList(product)">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 hover:fill-teal-700" viewBox="0 0 20 20" fill="currentColor" >
                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v2H7a1 1 0 100 2h2v2a1 1 0 102 0v-2h2a1 1 0 100-2h-2V7z" clip-rule="evenodd" />
                  </svg>
              </button>
              <div class=" overflow-hidden group-hover:opacity-75">
                <img src="@product.Icon" alt="@product.Name" class="w-full px-8 h-full object-center object-cover" />
              </div>
              <h1 class="text-xl my-4 mx-auto font-bold text-gray-900">
                  @product.Name
              </h1>
              
          </div>
      </div>
      }
    </div>
  </div>
</div>

@code {
    List<Product> products = new List<Product>();
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    List<Product> listItems = new List<Product>();


    protected override async Task OnInitializedAsync()
    {
        GenerateDefaultProducts();
        try
        {
            JWToken jwt = await GetTokenAsync();

            if(jwt == null)
            {
                NavigateToLogin();
                return;
            }

            hubConnection = new HubConnectionBuilder()
                .WithUrl($"http://localhost:5036/listHub?access_token={jwt.Token}")
                .Build();

            hubConnection.On<string>("ItemsUpdated", (string results) =>
             {
                 Console.WriteLine(results);
                 listItems = System.Text.Json.JsonSerializer.Deserialize<List<Product>>(results);
                 StateHasChanged();
            //AppendList(listArray); 
             });

            await hubConnection.StartAsync();
            await hubConnection.InvokeAsync("GetList", 1);
        } catch(Exception e)
        {
            Console.WriteLine("Unable to connect to hub");
            Console.WriteLine(e);
        }
    }


    public async Task AddToList(Product product)
    {
        var deserializedProduct = System.Text.Json.JsonSerializer.Serialize(product);
        await hubConnection.InvokeAsync("AddItemToList", deserializedProduct, 1);
    }

    public async Task DeleteItem(Product product)
    {
        var deserializedProduct = System.Text.Json.JsonSerializer.Serialize(product);
        await hubConnection.InvokeAsync("RemoveItemFromList", deserializedProduct, 1);
    }

    public void NavigateToLogin()
    {
        NavManager.NavigateTo("/login");
    }
    
    public async Task<JWToken> GetTokenAsync()
    {
        JWToken jwt = await localStorage.GetItemAsync<JWToken>("token");

        if(jwt != null)
        {
            if(jwt.Expiration <= DateTime.UtcNow)
            {
                await localStorage.RemoveItemAsync("token");
                jwt = null;
            }
        }
        return jwt;
    }
    
    
    private void GenerateDefaultProducts()
    {
        string[] p = { System.AppDomain.CurrentDomain.BaseDirectory, "wwwroot", "icons" };
        string iconsDir = Path.Combine(p);
        string[] directories = Directory.GetDirectories(iconsDir);
        foreach (string directory in directories)
        {
            foreach (string iconFile in Directory.GetFiles(directory))
            {
                TextInfo ti = new CultureInfo("en-US",false).TextInfo;
                string iconFileName = Path.GetFileNameWithoutExtension(iconFile);
                string name = ti.ToTitleCase(iconFileName.Split("-")[1]);
                string category = Path.GetFileNameWithoutExtension(directory).Replace("__", " ");
                string categoryPath = Path.GetFileName(directory);

                string icon = $"/icons/{categoryPath}/{Path.GetFileName(iconFile)}";


                products.Add(
                    new Product()
                    {
                        Name = name,
                        Category = category,
                        Quantity = 1,
                        Icon = icon
                    });
            }
        }
    }
}  