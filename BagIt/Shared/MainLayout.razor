@using Models;
@inherits LayoutComponentBase
@inject NavigationManager NavManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<div class="h-full">
	<header class="relative z-10">
      <div class="bg-gray-900 py-3">
        <nav class="relative max-w-7xl mx-auto flex items-center justify-between px-4 sm:px-6" aria-label="Global">
          <div class="flex items-center flex-1">
            <div class="flex items-center justify-between w-full md:w-auto">
              <a href="#">
                <span class="sr-only">BagIt</span>
                <img class="h-8 w-auto sm:h-10" src="/img/logo-v2.svg" alt="">
              </a>
              <div class="-mr-2 flex items-center md:hidden">
                <button type="button" @onclick="ToggleNavMenu" class="bg-gray-900 rounded-md p-2 inline-flex items-center justify-center text-gray-400 hover:bg-gray-800 focus:outline-none focus:ring-2 focus-ring-inset focus:ring-white" aria-expanded="false">
                  <span class="sr-only">Open Main Menu</span>
                  <!-- Heroicon name: outline/menu -->
                  <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
                  </svg>
                </button>
              </div>
            </div>
            <div class="hidden space-x-8 md:flex md:ml-10">
              <button type="button" @onclick="NavigateToHome" class="text-base font-medium text-white hover:text-gray-300">Home</button>
            </div>
            @if (isLoggedIn)
            {
                <div class="hidden space-x-8 md:flex md:ml-10">
                  <button type="button" @onclick="NavigateToLists" class="text-base font-medium text-white hover:text-gray-300">Lists</button>
                </div>
            }
          </div>
          <div class="hidden md:flex md:items-center md:space-x-6">
              @if (isLoggedIn)
                {
                    <button type="button" @onclick="Logout" class="text-base font-medium text-white hover:text-gray-300">Logout</button>
                } else
                {
                    <button type="button" @onclick="NavigateToLogin" class="text-base font-medium text-white hover:text-gray-300">Login</button>
                }

            <button type="button" @onclick="NavigateToRegister" class="inline-flex items-center px-4 py-2 border border-transparent text-base font-medium rounded-md text-white bg-gray-600 hover:bg-gray-700"> Register </button>
          </div>
        </nav>
      </div>

      <div class="@NavMenuVisibilityClass absolute z-0 top-0 inset-x-0 p-2 transition transform origin-top md:hidden">
        <div class="rounded-lg shadow-md bg-white ring-1 ring-black ring-opacity-5 overflow-hidden">
          <div class="px-5 pt-4 flex items-center justify-between">
            <div>
              <img class="h-8 w-auto" src="/img/logo-v2.svg" alt="Hero">
            </div>
            <div class="-mr-2">
              <button type="button" @onclick="CloseNavMenu" class="bg-white rounded-md p-2 inline-flex items-center justify-center text-gray-400 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-cyan-600">
                <span class="sr-only">Close menu</span>
                <!-- Heroicon name: outline/x -->
                <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
          </div>
          <div class="pt-5 pb-6">
            <div class="px-2 space-y-1">
              <button @onclick="NavigateToHome" class="block px-3 py-2 rounded-md text-base font-medium text-gray-900 hover:bg-gray-50">Home</button>
            </div>
            <div class="px-2 space-y-1">
                <button @onclick="NavigateToLists" class="block px-3 py-2 rounded-md text-base font-medium text-gray-900 hover:bg-gray-50">Lists</button>
            </div>
            <div class="mt-6 px-5">
              <button type="button" @onclick="NavigateToRegister"  class="block text-center w-full py-3 px-4 rounded-md shadow bg-gradient-to-r from-teal-500 to-cyan-600 text-white font-medium hover:from-teal-600 hover:to-cyan-700">Register</button>
            </div>
            @if (isLoggedIn)
            {
                <div class="mt-6 px-5">
                  <button type="button" @onclick="Logout" class="text-center text-base font-medium text-gray-500"><a href="#" class="text-gray-900 hover:underline">Logout</a></button>
                </div> 
            }
            else
            {
                <div class="mt-6 px-5">
                  <button type="button" @onclick="NavigateToLogin" class="text-center text-base font-medium text-gray-500">Existing User? <a href="#" class="text-gray-900 hover:underline">Login</a></button>
                </div>        
            }
          </div>
        </div>
      </div>
    </header>
	<main class="h-full z-0" @onfocusin="CloseNavMenu">
		<article class="h-full">
			@Body
		</article>
	</main>
</div>

@code {
    private bool isLoggedIn;
    private bool collapseNavMenu = true;
    private string NavMenuVisibilityClass => collapseNavMenu ? "hidden" : "block";


    protected override async Task OnInitializedAsync()
    {
        isLoggedIn = await IsTokenValidAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        isLoggedIn = await IsTokenValidAsync();
    }

    public void NavigateToRegister()
    {
        NavManager.NavigateTo("/register");
    }

    public void NavigateToLogin()
    {
        NavManager.NavigateTo("/login");
    }

    public void NavigateToHome()
    {
        NavManager.NavigateTo("/");
    }

    public void NavigateToLists()
    {
        NavManager.NavigateTo("/lists");
    }


    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private void CloseNavMenu()
    {
        collapseNavMenu = true;
    }

    public async Task<bool> IsTokenValidAsync()
    {

        JWToken jwt = await localStorage.GetItemAsync<JWToken>("token");

        if(jwt == null)
        {
            return false;
        }

        if(jwt.Expiration <= DateTime.UtcNow)
        {
            await localStorage.RemoveItemAsync("token");
            return false;
        }

        return true;
    }

    public async Task Logout()
    {
        JWToken jwt = await localStorage.GetItemAsync<JWToken>("token");

        if(jwt != null)
        {
            await localStorage.RemoveItemAsync("token");
        }
        isLoggedIn = false;
    }
}